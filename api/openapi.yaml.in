# Cray Boot Orchestration Service (BOS) API Specification
openapi: "3.0.2"

info:
  title: "Boot Orchestration Service"
  version: "0.0.0-api"
  description: |
    The Boot Orchestration Service (BOS) provides coordinated provisioning actions
    over defined hardware sets to enable boot, reboot, shutdown, configuration and
    staging for specified hardware subsets. These provisioning actions apply state
    through numerous system management APIs at the request of system administrators
    for managed product environments.

    The default content type for the BOS API is "application/json". Unsuccessful
    API calls return a content type of "application/problem+json" as per RFC 7807.

    ## Resources


    ### Session Template

    A Session Template sets the operational context of which nodes to operate on for
    any given set of nodes. It is largely comprised of one or more boot
    sets and their associated software configuration.

    A Boot Set defines a list of nodes, the image you want to boot/reboot the nodes with,
    kernel parameters to use to boot the nodes, and additional configuration management
    framework actions to apply during node bring up.

    ### Session

    A BOS Session applies a provided action to the nodes defined in a Session Template.


    ## Workflow: Create a New Session

    1. Choose the Session Template to use.

      Session Templates which do not belong to a tenant are uniquely identified by their
      names. All Session Templates that belong to a given tenant are uniquely identified
      by their names, but may share names with Session Templates that belong to other
      tenants or that do not belong to a tenant.

      a. List available Session Templates.

        GET /v1/sessiontemplate or /v2/sessiontemplates

      b. Create a new Session Template if desired.

        POST /v1/sessiontemplate or PUT /v2/sessiontemplate/{template_name}

        If no Session Template exists that satisfies requirements,
        then create a new Session Template.
        This Session Template can be used to create a new Session later.

    2. Create the Session.

      POST /v1/session or /v2/sessions

      Specify template_name and an operation to create a new Session.
      The template_name corresponds to the Session Template *name*.
      A new Session is launched as a result of this call (in the case of
      /v2/sessions, the option to stage but not begin the Session also exists).

      A limit can also be specified to narrow the scope of the Session. The limit
      can consist of nodes, groups, or roles in a comma-separated list.
      Multiple groups are treated as separated by OR, unless "&" is added to
      the start of the component, in which case this becomes an AND.  Components
      can also be preceded by "!" to exclude them.

      Note, the response from a successful Session launch contains *links*.
      Within *links*, *href* is a string that uniquely identifies the Session.
      *href* is constructed using the Session Template name and a generated UUID.
      Use the entire *href* string as the path parameter *session_id*
      to uniquely identify a Session.

    3. Get details on the Session.

      GET /v1/session/{session_id} or /v2/sessions/{session_id}


    ## Interactions with Other APIs

    ### Configuration Framework Service (CFS)

    If *enable_cfs* is true in a Session Template, then BOS will invoke CFS to
    configure the target nodes during *boot*, *reboot*, or *configure*
    operations. The *configure* operation is only available in BOS v1 Sessions;
    if desiring to only perform a CFS configuration on a set of nodes, it is
    recommended to use CFS directly.

    ### Hardware State Manager (HSM)

    In some situations BOS checks HSM to determine if a node has been disabled.

    ### Image Management Service (IMS)

    BOS works in concert with IMS to access boot images.
    All boot images specified via the Session Template must be available via IMS.


servers:
- url: https://api-gw-service-nmn.local/apis/bos
  description: The production BOS API server through a standard API gateway
- url: https://cray-bos
  description: The service as exposed through Kubernetes DNS service mapping
components:
  schemas:
    # Version-agnostic schemas
    AgeString:
      type: string
      description: Age in minutes (e.g. "3m"), hours (e.g. "5h"), days (e.g. "10d"), or weeks (e.g. "2w").
      example: 3d
      format: '^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$'
      minLength: 1
      # This allows for over 10 years using the smallest units (minutes)
      maxLength: 8
    BootInitrdPath:
      type: string
      description: |
        A path to the initrd to use for booting.

        It is recommended that this should be no more than 4095 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/initrd"
    BootKernelPath:
      type: string
      description: |
        A path to the kernel to use for booting.

        It is recommended that this should be no more than 4095 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/kernel"
    BootManifestPath:
      type: string
      description: |
        A path identifying the metadata describing the components of the boot image.
        This could be a URI, URL, etc, depending on the type of the Boot Set.

        It is recommended that this should be 1-4095 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "s3://boot-images/9e3c75e1-ac42-42c7-873c-e758048897d6/manifest.json"
    BootKernelParameters:
      type: string
      description: |
        The kernel parameters to use to boot the nodes.

        Linux kernel parameters may never exceed 4096 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "console=ttyS0,115200 bad_page=panic crashkernel=340M hugepagelist=2m-2g intel_iommu=off intel_pstate=disable iommu=pt ip=dhcp numa_interleave_omit=headless numa_zonelist_order=node oops=panic pageblock_order=14 pcie_ports=native printk.synchronous=y rd.neednet=1 rd.retry=10 rd.shell turbo_boost_limit=999 spire_join_token=${SPIRE_JOIN_TOKEN}"
    BootSetEtag:
      type: string
      description: |
        This is the 'entity tag'. It helps verify the version of metadata describing the components of the boot image we are working with.

        ETags are defined as being 1-65536 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "1cc4eef4f407bd8a62d7d66ee4b9e9c8"
    BootSetName:
      type: string
      description: |
        The Boot Set name.

        It is recommended that:
        * Boot Set names should be 1-127 characters in length.
        * Boot Set names should use only letters, digits, periods (.), dashes (-), and underscores (_).
        * Boot Set names should begin and end with a letter or digit.

        These restrictions are not enforced in this version of BOS, but they are
        targeted to start being enforced in an upcoming BOS version.
      example: "compute"
    BootSetRootfsProvider:
      type: string
      description: |
        The root file system provider.

        It is recommended that this should be 1-511 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "cpss3"
    BootSetRootfsProviderPassthrough:
      type: string
      description: |
        The root file system provider passthrough.
        These are additional kernel parameters that will be appended to
        the 'rootfs=<protocol>' kernel parameter

        Linux kernel parameters may never exceed 4096 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "dvs:api-gw-service-nmn.local:300:nmn0"
    BootSetType:
      type: string
      description: |
        The MIME type of the metadata describing the components of the boot image. This type controls how BOS processes the path attribute.

        It is recommended that this should be 1-127 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "s3"
    CfsConfiguration:
      type: string
      description: |
        The name of configuration to be applied.

        It is recommended that this should be no more than 127 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "compute-23.4.0"
    EmptyString:
      type: string
      description: An empty string value.
      enum: [ '' ]
    EmptyStringNullable:
      type: string
      description: An empty string value.
      enum: [ '' ]
    EnableCfs:
      type: boolean
      description: |
        Whether to enable the Configuration Framework Service (CFS).
      default: true
    HardwareComponentName:
      type: string
      description: |
        Hardware component name (xname).

        It is recommended that this should be 1-127 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "x3001c0s39b0n0"
    Healthz:
      description: Service health status
      type: object
      properties:
        dbStatus:
          type: string
        apiStatus:
          type: string
      additionalProperties: false
    Link:
      description: Link to other resources
      type: object
      properties:
        href:
          type: string
        rel:
          type: string
      additionalProperties: false
    LinkList:
      description: List of links to other resources
      type: array
      items:
        $ref: '#/components/schemas/Link'
    LinkListReadOnly:
      description: List of links to other resources
      type: array
      readOnly: true
      items:
        $ref: '#/components/schemas/Link'
    NodeList:
      type: array
      description: |
        A node list that is required to have at least one node.

        It is recommended that this list should be 1-65535 items in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      minItems: 1
      example: ["x3000c0s19b1n0", "x3000c0s19b2n0"]
      items:
        $ref: '#/components/schemas/HardwareComponentName'
    NodeListEmptyOk:
      type: array
      description: |
        A node list that is allowed to be empty.

        It is recommended that this list should be no more than 65535 items in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: ["x3000c0s19b1n0", "x3000c0s19b2n0"]
      items:
        $ref: '#/components/schemas/HardwareComponentName'
    NodeGroupList:
      type: array
      description: |
        Node group list. Allows actions against associated nodes by logical groupings.

        It is recommended that this list should be 1-4095 items in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      minItems: 1
      items:
        type: string
        description: |
          Name of a user-defined logical group in the Hardware State Manager (HSM).

          It is recommended that this should be 1-127 characters in length.

          This restriction is not enforced in this version of BOS, but it is
          targeted to start being enforced in an upcoming BOS version.
    NodeRoleList:
      type: array
      description: |
        Node role list. Allows actions against nodes with associated roles.

        It is recommended that this list should be 1-1023 items in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      minItems: 1
      example: ["Compute", "Application"]
      items:
        type: string
        description: |
          Name of a role that is defined in the Hardware State Manager (HSM).

          It is recommended that this should be 1-127 characters in length.

          This restriction is not enforced in this version of BOS, but it is
          targeted to start being enforced in an upcoming BOS version.
        example: "Compute"
    ProblemDetails:
      description: An error response for RFC 7807 problem details.
      type: object
      properties:
        type:
          description: |
            Relative URI reference to the type of problem which includes human
            readable documentation.
          type: string
          format: uri
          default: "about:blank"
        title:
          description: |
            Short, human-readable summary of the problem, should not change by
            occurrence.
          type: string
        status:
          description: HTTP status code
          type: integer
          example: 400
        instance:
          description: |
            A relative URI reference that identifies the specific occurrence of
            the problem
          format: uri
          type: string
        detail:
          description: |
            A human-readable explanation specific to this occurrence of the
            problem. Focus on helping correct the problem, rather than giving
            debugging information.
          type: string
      additionalProperties: false
    SessionLimit:
      type: string
      description: |
        A comma-separated list of nodes, groups, or roles to which the Session
        will be limited. Components are treated as OR operations unless
        preceded by "&" for AND or "!" for NOT.

        It is recommended that this should be 1-65535 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
    SessionTemplateDescription:
      type: string
      description: |
        An optional description for the Session Template.

        It is recommended that this should be 1-1023 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
    SessionTemplateName:
      type: string
      description: |
        Name of the Session Template.

        It is recommended to use names which meet the following restrictions:
        * Maximum length of 127 characters.
        * Use only letters, digits, periods (.), dashes (-), and underscores (_).
        * Begin and end with a letter or digit.

        These restrictions are not enforced in this version of BOS, but they are
        targeted to start being enforced in an upcoming BOS version.
      minLength: 1
      example: "cle-1.0.0"
    TenantName:
      type: string
      description: |
        Name of a tenant. Used for multi-tenancy. An empty string means no tenant.

        It is recommended that this should be no more than 127 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
      example: "vcluster-my-tenant1"
    Version:
      description: Version data
      type: object
      properties:
        major:
          type: string
          pattern: '^(0|[1-9][0-9]*)$'
        minor:
          type: string
          pattern: '^(0|[1-9][0-9]*)$'
        patch:
          type: string
          pattern: '^(0|[1-9][0-9]*)$'
        links:
          $ref: '#/components/schemas/LinkList'
      additionalProperties: false

    # V1
    V1CfsBranch:
      type: string
      deprecated: true
      description: |
        The name of the branch containing the configuration that you want to
        apply to the nodes. Mutually exclusive with commit. (DEPRECATED)

        It is recommended that this should be 1-1023 characters in length.

        When upgrading to this version of BOS, all existing V1 session
        templates will automatically have this deprecated field removed from them.

        When a V1 session template is created, this deprecated field is
        automatically removed from it before storing it in BOS.
    V1CfsUrl:
      type: string
      deprecated: true
      description: |
        The clone URL for the repository providing the configuration. (DEPRECATED)

        It is recommended that this should be 1-4096 characters in length.

        When upgrading to this version of BOS, all existing V1 session
        templates will automatically have this deprecated field removed from them.

        When a V1 session template is created, this deprecated field is
        automatically removed from it before storing it in BOS.
    V1CfsParameters:
      type: object
      description: |
        This is the collection of parameters that are passed to the Configuration
        Framework Service when configuration is enabled.
      properties:
        clone_url:
          $ref: '#/components/schemas/V1CfsUrl'
        branch:
          $ref: '#/components/schemas/V1CfsBranch'
        commit:
          type: string
          deprecated: true
          description: |
            The commit ID of the configuration that you want to
            apply to the nodes. Mutually exclusive with branch. (DEPRECATED)

            git commit hashes are hexadecimal strings with a length of 40 characters (although
            fewer characters may be sufficient to uniquely identify a commit in some cases).

            When upgrading to this version of BOS, all existing V1 session
            templates will automatically have this deprecated field removed from them.

            When a V1 session template is created, this deprecated field is
            automatically removed from it before storing it in BOS.
        playbook:
          type: string
          deprecated: true
          description: |
            The name of the playbook to run for configuration. The file path must be specified
            relative to the base directory of the config repository. (DEPRECATED)

            It is recommended that this should be 1-255 characters in length.

            When upgrading to this version of BOS, all existing V1 session
            templates will automatically have this deprecated field removed from them.

            When a V1 session template is created, this deprecated field is
            automatically removed from it before storing it in BOS.
        configuration:
          $ref: '#/components/schemas/CfsConfiguration'
      additionalProperties: false
    V1CompleteMetadata:
      type: boolean
      description: Is the object's status complete
      example: true
    V1ErrorCountMetadata:
      type: integer
      description: How many errors were encountered
      example: 0
    V1InProgressMetadata:
      type: boolean
      description: Is the object still doing something
      example: false
    V1StartTimeMetadata:
      type: string
      description: The start time
      example: "2020-04-24T12:00"
    V1StopTimeMetadata:
      type: string
      description: The stop time. In some contexts, the value may be null before the operation finishes.
      example: "2020-04-24T12:00"
      nullable: true
    V1GenericMetadata:
      type: object
      description: |
        The status metadata
      properties:
        complete:
          $ref: '#/components/schemas/V1CompleteMetadata'
        error_count:
          $ref: '#/components/schemas/V1ErrorCountMetadata'
        in_progress:
          $ref: '#/components/schemas/V1InProgressMetadata'
        start_time:
          $ref: '#/components/schemas/V1StartTimeMetadata'
        stop_time:
          $ref: '#/components/schemas/V1StopTimeMetadata'
      additionalProperties: false
    V1PhaseCategoryName:
      type: string
      description: |
        Name of the Phase Category
        not_started, in_progress, succeeded, failed, or excluded
      example: "Succeeded"
      pattern: '^([nN][oO][tT]_[sS][tT][aA][rR][tT][eE][dD]|[iI][nN]_[pP][rR][oO][gG][rR][eE][sS][sS]|[sS][uU][cC][cC][eE][eE][dD][eE][dD]|[fF][aA][iI][lL][eE][dD]|[eE][xX][cC][lL][uU][dD][eE][dD])$'
    V1PhaseCategoryStatus:
      type: object
      description: |
        A list of the nodes in a given category within a Phase.

        ## Link Relationships

        * self : The phase category status object

      properties:
        name:
          $ref: '#/components/schemas/V1PhaseCategoryName'
        node_list:
          $ref: '#/components/schemas/NodeListEmptyOk'
    V1PhaseStatus:
      type: object
      description: |
        The phase's status. It is a list of all of the nodes in the phase and
        what category those nodes fall into within the phase.

        ## Link Relationships

        * self : The phase status object

      properties:
        name:
          type: string
          description: |
            Name of the Phase
            boot, configure, or shutdown
          example: "Boot"
          pattern: '^([bB][oO][oO][tT]|[cC][oO][nN][fF][iI][gG][uU][rR][eE]|[sS][hH][uU][tT][dD][oO][wW][nN])$'
        metadata:
          $ref: '#/components/schemas/V1GenericMetadata'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/V1PhaseCategoryStatus'
        errors:
          $ref: '#/components/schemas/V1NodeErrorsList'
    V1SessionId:
      type: string
      description: Unique BOS v1 Session identifier.
      format: uuid
      example: "8deb0746-b18c-427c-84a8-72ec6a28642c"
    V1BootSetStatus:
      type: object
      description: |
        The status for a Boot Set. It as a list of the phase statuses for the Boot Set.

        ## Link Relationships

        * self : The Boot Set Status object
        * phase : A phase of the Boot Set

      properties:
        name:
          $ref: '#/components/schemas/BootSetName'
        session:
          $ref: '#/components/schemas/V1SessionId'
        metadata:
          $ref: '#/components/schemas/V1GenericMetadata'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/V1PhaseStatus'
        links:
          $ref: '#/components/schemas/LinkList'
    V1SessionStatus:
      type: object
      description: |
        The status for a Session. It is a list of all of the Boot Set Statuses in the Session.

        ## Link Relationships

        * self : The Session status object
        * boot sets: URL to access the Boot Set status

      properties:
        metadata:
          $ref: '#/components/schemas/V1GenericMetadata'
        boot_sets:
           description: |
             The Boot Sets in the Session
           type: array
           items:
             $ref: '#/components/schemas/BootSetName'
           minItems: 1
        id:
          $ref: '#/components/schemas/V1SessionId'
        links:
          $ref: '#/components/schemas/LinkList'
    V1BootSet:
      description: |
        A Boot Set defines a collection of nodes and the information about the
        boot artifacts and parameters to be sent to each node over the specified
        network to enable these nodes to boot. When multiple Boot Sets are used
        in a Session Template, the boot_ordinal and shutdown_ordinal indicate
        the order in which Boot Sets need to be acted upon. Boot Sets sharing
        the same ordinal number will be addressed at the same time.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/BootSetName'
        path:
          $ref: '#/components/schemas/BootManifestPath'
        type:
          $ref: '#/components/schemas/BootSetType'
        etag:
          $ref: '#/components/schemas/BootSetEtag'
        kernel_parameters:
          $ref: '#/components/schemas/BootKernelParameters'
        node_list:
          $ref: '#/components/schemas/NodeList'
        node_roles_groups:
          $ref: '#/components/schemas/NodeRoleList'
        node_groups:
          $ref: '#/components/schemas/NodeGroupList'
        rootfs_provider:
          $ref: '#/components/schemas/BootSetRootfsProvider'
        rootfs_provider_passthrough:
          $ref: '#/components/schemas/BootSetRootfsProviderPassthrough'
        network:
          type: string
          deprecated: true
          description: |
            The network over which the node will boot.
            Choices:  NMN -- Node Management Network

            When upgrading to this version of BOS, all existing V1 session
            templates will automatically have this deprecated field removed from them.

            When a V1 session template is created, this deprecated field is
            automatically removed from it before storing it in BOS.
          pattern: '^[nN][mM][nN]$'
        boot_ordinal:
          type: integer
          deprecated: true
          minimum: 0
          description: |
            The boot ordinal. This will establish the order for Boot Set operations.
            Boot Sets boot in order from the lowest to highest boot_ordinal.

            It is recommended that this should have a maximum value of 65535.

            When upgrading to this version of BOS, all existing V1 session
            templates will automatically have this deprecated field removed from them.

            When a V1 session template is created, this deprecated field is
            automatically removed from it before storing it in BOS.
        shutdown_ordinal:
          type: integer
          deprecated: true
          minimum: 0
          description: |
            The shutdown ordinal. This will establish the order for Boot Set
            shutdown operations. Sets shutdown from low to high shutdown_ordinal.

            It is recommended that this should have a maximum value of 65535.

            When upgrading to this version of BOS, all existing V1 session
            templates will automatically have this deprecated field removed from them.

            When a V1 session template is created, this deprecated field is
            automatically removed from it before storing it in BOS.
      additionalProperties: false
      required: [path, type]
    V1SessionTemplateUuid:
      type: string
      description: |
        DEPRECATED - use templateName. This field is ignored if templateName is also set.

        Name of the Session Template.

        It is recommended to use names which meet the following restrictions:
        * 1-127 characters in length.
        * Use only letters, digits, periods (.), dashes (-), and underscores (_).
        * Begin and end with a letter or digit.
      minLength: 1
      example: "my-session-template"
      deprecated: true
    V1SessionTemplate:
      type: object
      description: |
        A Session Template object represents a collection of resources and metadata.
        A Session Template is used to create a Session which when combined with an
        action (i.e. boot, configure, reboot, shutdown) will create a Kubernetes BOA job
        to complete the required tasks for the operation.

        When upgrading to this version of BOS, all existing V1 session templates
        will automatically have all deprecated fields removed from them.

        When a V1 session template is created, all deprecated fields are automatically
        removed from it before storing it in BOS.

        ## Link Relationships

        * self : The Session Template object
      properties:
        name:
          $ref: '#/components/schemas/SessionTemplateName'
        description:
          $ref: '#/components/schemas/SessionTemplateDescription'
        cfs_url:
          $ref: '#/components/schemas/V1CfsUrl'
        cfs_branch:
          $ref: '#/components/schemas/V1CfsBranch'
        enable_cfs:
          $ref: '#/components/schemas/EnableCfs'
        cfs:
          $ref: '#/components/schemas/V1CfsParameters'
        partition:
          type: string
          deprecated: true
          description: |
            The machine partition to operate on.

            It is recommended that this should be 1-255 characters in length.

            When upgrading to this version of BOS, all existing V1 session
            templates will automatically have this deprecated field removed from them.

            When a V1 session template is created, this deprecated field is
            automatically removed from it before storing it in BOS.
        boot_sets:
          type: object
          description: |
            Mapping from Boot Set names to Boot Sets.

            It is recommended that:
            * At least one Boot Set should be defined, because a Session Template with no
              Boot Sets is not functional.
            * Boot Set names should be 1-127 characters in length.
            * Boot Set names should use only letters, digits, periods (.), dashes (-), and underscores (_).
            * Boot Set names should begin and end with a letter or digit.
          additionalProperties:
            $ref: '#/components/schemas/V1BootSet'
      required: [name]
      additionalProperties: false
    V1BoaKubernetesJob:
      type: string
      maxLength: 64
      readOnly: true
      description: The identity of the Kubernetes job that is created to handle the Session.
      example: "boa-07877de1-09bb-4ca8-a4e5-943b1262dbf0"
    V1Operation:
      type: string
      description: |
        A Session represents an operation on a Session Template.
        The creation of a Session effectively results in the creation
        of a Kubernetes Boot Orchestration Agent (BOA) job to perform the
        duties required to complete the operation.

        Operation -- An operation to perform on nodes in this Session.

            Boot         Boot nodes that are off.

            Configure    Reconfigure the nodes using the Configuration Framework
                         Service (CFS).

            Reboot       Gracefully power down nodes that are on and then power
                         them back up.

            Shutdown     Gracefully power down nodes that are on.

      pattern: '^([bB][oO][oO][tT]|[cC][oO][nN][fF][iI][gG][uU][rR][eE]|[rR][eE][bB][oO][oO][tT]|[sS][hH][uU][tT][dD][oO][wW][nN])$'
      example: "boot"
    V1SessionLink:
      description: Link to other resources
      type: object
      properties:
        href:
          type: string
        jobId:
          $ref: '#/components/schemas/V1BoaKubernetesJob'
        rel:
          type: string
          enum: ['session', 'status']
        type:
          type: string
          enum: ['GET']
      additionalProperties: false
    V1SessionStatusUri:
      type: string
      description: URI to the status for this Session
      format: uri
      example: "/v1/session/90730844-094d-45a5-9b90-d661d14d9444/status"
    V1SessionDetails:
      description: Details about a Session.
      type: object
      properties:
        complete:
          $ref: '#/components/schemas/V1CompleteMetadata'
        error_count:
          $ref: '#/components/schemas/V1ErrorCountMetadata'
        in_progress:
          $ref: '#/components/schemas/V1InProgressMetadata'
        job:
          $ref: '#/components/schemas/V1BoaKubernetesJob'
        operation:
          $ref: '#/components/schemas/V1Operation'
        start_time:
          $ref: '#/components/schemas/V1StartTimeMetadata'
        status_link:
          $ref: '#/components/schemas/V1SessionStatusUri'
        stop_time:
          $ref: '#/components/schemas/V1StopTimeMetadata'
        templateName:
          $ref: '#/components/schemas/SessionTemplateName'
    V1SessionDetailsByTemplateUuid:
      description: |
        Details about a Session using templateUuid instead of templateName.
        DEPRECATED -- these will only exist from Sessions created before templateUuid was deprecated.
      deprecated: true
      type: object
      properties:
        complete:
          $ref: '#/components/schemas/V1CompleteMetadata'
        error_count:
          $ref: '#/components/schemas/V1ErrorCountMetadata'
        in_progress:
          $ref: '#/components/schemas/V1InProgressMetadata'
        job:
          $ref: '#/components/schemas/V1BoaKubernetesJob'
        operation:
          $ref: '#/components/schemas/V1Operation'
        start_time:
          $ref: '#/components/schemas/V1StartTimeMetadata'
        status_link:
          $ref: '#/components/schemas/V1SessionStatusUri'
        stop_time:
          $ref: '#/components/schemas/V1StopTimeMetadata'
        templateName:
          $ref: '#/components/schemas/SessionTemplateName'
    V1SessionLinkList:
      type: array
      readOnly: true
      items:
        $ref: '#/components/schemas/V1SessionLink'
    V1Session:
      description: |
        A Session object

        ## Link Relationships

        * self : The Session object
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/V1Operation'
        templateName:
          $ref: '#/components/schemas/SessionTemplateName'
        job:
          $ref: '#/components/schemas/V1BoaKubernetesJob'
        limit:
          $ref: '#/components/schemas/SessionLimit'
        links:
          $ref: '#/components/schemas/V1SessionLinkList'
      required: [operation, templateName]
      additionalProperties: false
    V1SessionByTemplateName:
      description: |
        A Session object specified by templateName

        ## Link Relationships

        * self : The Session object
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/V1Operation'
        templateUuid:
          $ref: '#/components/schemas/V1SessionTemplateUuid'
        templateName:
          $ref: '#/components/schemas/SessionTemplateName'
        job:
          $ref: '#/components/schemas/V1BoaKubernetesJob'
        limit:
          $ref: '#/components/schemas/SessionLimit'
        links:
          $ref: '#/components/schemas/V1SessionLinkList'
      required: [operation, templateName]
      additionalProperties: false
    V1SessionByTemplateUuid:
      description: |
        A Session object specified by templateUuid (DEPRECATED -- use templateName)

        ## Link Relationships

        * self : The Session object
      deprecated: true
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/V1Operation'
        templateUuid:
          $ref: '#/components/schemas/V1SessionTemplateUuid'
        job:
          $ref: '#/components/schemas/V1BoaKubernetesJob'
        limit:
          $ref: '#/components/schemas/SessionLimit'
        links:
          $ref: '#/components/schemas/V1SessionLinkList'
      required: [operation, templateUuid]
      additionalProperties: false
    V1PhaseName:
      type: string
      description: |
        The phase that this data belongs to (boot, shutdown, or configure). Or it can
        be set to "boot_set" to indicate that it belongs to the Boot Set itself.
      example: "Boot"
      pattern: '^([bB][oO][oO][tT]_[sS][eE][tT]$|[sS][hH][uU][tT][dD][oO][wW][nN]$|[bB][oO][oO][tT]$|[cC][oO][nN][fF][iI][gG][uU][rR][eE]$)'
    V1NodeChangeList:
      type: object
      description: |
        The information used to update the status of a node list. It moves nodes from
        one category to another within a phase.
      properties:
        phase:
          $ref: '#/components/schemas/V1PhaseName'
        source:
          $ref: '#/components/schemas/V1PhaseCategoryName'
        destination:
          $ref: '#/components/schemas/V1PhaseCategoryName'
        node_list:
          $ref: '#/components/schemas/NodeListEmptyOk'
      additionalProperties: false
      required: [phase, source, destination, node_list]
    V1NodeErrorsList:
      type: object
      description: |
        Categorizing nodes into failures by the type of error they have.
        This is an additive characterization. Nodes will be added to existing errors.
        This does not overwrite previously existing errors.
      additionalProperties:
        $ref: '#/components/schemas/NodeListEmptyOk'
    V1UpdateRequestNodeChange:
      description: |
        This is an element of the payload sent during an update request. It contains
        updates to which categories nodes are in.
      type: object
      properties:
        update_type:
          description: The type of update data
          enum: [ 'NodeChangeList' ]
          type: string
        phase:
          $ref: '#/components/schemas/V1PhaseName'
        data:
          $ref: '#/components/schemas/V1NodeChangeList'
      required: [ 'data', 'phase', 'update_type' ]
    V1UpdateRequestNodeErrors:
      description: |
        This is an element of the payload sent during an update request. It contains
        updates to which errors have occurred and which nodes encountered those errors
      type: object
      properties:
        update_type:
          description: The type of update data
          enum: [ 'NodeErrorsList' ]
          type: string
        phase:
          $ref: '#/components/schemas/V1PhaseName'
        data:
          $ref: '#/components/schemas/V1NodeErrorsList'
      required: [ 'data', 'phase', 'update_type' ]
    V1UpdateRequestGenericMetadata:
      description: |
        This is an element of the payload sent during an update request. It contains
        updates to metadata, specifically start and stop times
      type: object
      properties:
        update_type:
          description: The type of update data
          enum: [ 'GenericMetadata' ]
          type: string
        phase:
          $ref: '#/components/schemas/V1PhaseName'
        data:
          $ref: '#/components/schemas/V1GenericMetadata'
      required: [ 'data', 'phase', 'update_type' ]
    V1UpdateRequestList:
      description: |
        This is the payload sent during an update request. It contains a list of updates.
      type: array
      items:
        # Each item in the list should match exactly one of these schemas (since they are mutually exclusive)
        oneOf:
          - $ref: '#/components/schemas/V1UpdateRequestNodeChange'
          - $ref: '#/components/schemas/V1UpdateRequestNodeErrors'
          - $ref: '#/components/schemas/V1UpdateRequestGenericMetadata'
    # V2
    V2TenantName:
      type: string
      description: |
        Name of the tenant that owns this resource. Only used in environments
        with multi-tenancy enabled. An empty string or null value means the resource
        is not owned by a tenant. The absence of this field from a resource indicates
        the same.
      nullable: true
      readOnly: true
    V2CfsParameters:
      type: object
      description: |
        This is the collection of parameters that are passed to the Configuration
        Framework Service when configuration is enabled. Can be set as the global value for
        a Session Template, or individually within a Boot Set.
      properties:
        configuration:
          $ref: '#/components/schemas/CfsConfiguration'
      additionalProperties: false
    V2SessionTemplate:
      type: object
      description: |
        A Session Template object represents a collection of resources and metadata.
        A Session Template is used to create a Session which applies the data to
        group of Components.

        ## Link Relationships

        * self : The Session Template object
      properties:
        name:
          type: string
          minLength: 1
          readOnly: true
          description: |
            Name of the Session Template.

            It is recommended to use names which meet the following restrictions:
            * Maximum length of 127 characters.
            * Use only letters, digits, periods (.), dashes (-), and underscores (_).
            * Begin and end with a letter or digit.

            These restrictions are not enforced in this version of BOS, but they are
            targeted to start being enforced in an upcoming BOS version.
          example: "cle-1.0.0"
        tenant:
          $ref: '#/components/schemas/V2TenantName'
        description:
          $ref: '#/components/schemas/SessionTemplateDescription'
        enable_cfs:
          $ref: '#/components/schemas/EnableCfs'
        cfs:
          $ref: '#/components/schemas/V2CfsParameters'
        boot_sets:
          type: object
          description: |
            Mapping from Boot Set names to Boot Sets.

            It is recommended that:
            * At least one Boot Set should be defined, because a Session Template with no
              Boot Sets is not functional.
            * Boot Set names should be 1-127 characters in length.
            * Boot Set names should use only letters, digits, periods (.), dashes (-), and underscores (_).
            * Boot Set names should begin and end with a letter or digit.

            These restrictions are not enforced in this version of BOS, but they are
            targeted to start being enforced in an upcoming BOS version.
          additionalProperties:
            $ref: '#/components/schemas/V2BootSet'
        links:
          $ref: '#/components/schemas/LinkListReadOnly'
      additionalProperties: false
    V2SessionTemplateValidation:
      description: |
        Message describing errors or incompleteness in a Session Template.
      type: string
    V2SessionName:
      type: string
      description: Name of the Session.
      example: "session-20190728032600"
      # These validation parameters are restricted by Kubernetes naming conventions.
      minLength: 1
      maxLength: 45
      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
    V2SessionOperation:
      type: string
      enum: ['boot', 'reboot', 'shutdown']
      description: |
        A Session represents a desired state that is being applied to a group
        of Components.  Sessions run until all Components it manages have
        either been disabled due to completion, or until all Components are
        managed by other newer Sessions.

        Operation -- An operation to perform on Components in this Session.
            Boot                 Applies the Template to the Components and boots/reboots if necessary.
            Reboot               Applies the Template to the Components; guarantees a reboot.
            Shutdown             Power down Components that are on.
    V2SessionCreate:
      description: |
        A Session Creation object. A UUID name is generated if a name is not provided.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/V2SessionName'
        operation:
          $ref: '#/components/schemas/V2SessionOperation'
        template_name:
          $ref: '#/components/schemas/SessionTemplateName'
        limit:
          $ref: '#/components/schemas/SessionLimit'
        stage:
          type: boolean
          description: |
            Set to stage a Session which will not immediately change the state of any Components.
            The "applystaged" endpoint can be called at a later time to trigger the start of this Session.
          default: false
        include_disabled:
          type: boolean
          description: |
            Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).
          default: false
      required: [operation, template_name]
      additionalProperties: false
    V2SessionStatusLabel:
      type: string
      enum: ['pending', 'running', 'complete']
      description: The status of a Session.
    V2SessionStartTime:
      type: string
      description: When the Session was created.
    V2SessionEndTime:
      type: string
      nullable: true
      description: When the Session was completed. A null value means the Session has not ended.
    V2SessionStatus:
      type: object
      description: |
        Information on the status of a Session.
      properties:
        start_time:
          $ref: '#/components/schemas/V2SessionStartTime'
        end_time:
          $ref: '#/components/schemas/V2SessionEndTime'
        status:
          $ref: '#/components/schemas/V2SessionStatusLabel'
        error:
          type: string
          nullable: true
          description: |
            Error which prevented the Session from running.
            A null value means the Session has not encountered an error.
      additionalProperties: false
    V2BootSet:
      description: |
        A Boot Set is a collection of nodes defined by an explicit list, their functional
        role, and their logical groupings. This collection of nodes is associated with one
        set of boot artifacts and optional additional records for configuration and root
        filesystem provisioning.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/BootSetName'
        path:
          $ref: '#/components/schemas/BootManifestPath'
        cfs:
          $ref: '#/components/schemas/V2CfsParameters'
        type:
          $ref: '#/components/schemas/BootSetType'
        etag:
          $ref: '#/components/schemas/BootSetEtag'
        kernel_parameters:
          $ref: '#/components/schemas/BootKernelParameters'
        node_list:
          $ref: '#/components/schemas/NodeList'
        node_roles_groups:
          $ref: '#/components/schemas/NodeRoleList'
        node_groups:
          $ref: '#/components/schemas/NodeGroupList'
        arch:
          type: string
          description: >
              The node architecture to target. Filters nodes that are not part of matching architecture from being targeted by boot actions. This value
              should correspond to HSM component 'Arch' field exactly. For reasons of backwards compatibility, all HSM nodes that are of type Unknown
              are treated as being of type X86.
          default: X86
          enum: [X86, ARM, Other, Unknown]
        rootfs_provider:
          $ref: '#/components/schemas/BootSetRootfsProvider'
        rootfs_provider_passthrough:
          $ref: '#/components/schemas/BootSetRootfsProviderPassthrough'
      additionalProperties: false
      required: [path, type]
    V2SessionTemplateArray:
      description: An array of Session Templates.
      type: array
      items:
        $ref: '#/components/schemas/V2SessionTemplate'
    V2Session:
      description: |
        A Session object

        ## Link Relationships

        * self : The Session object
      type: object
      properties:
        name:
          $ref: '#/components/schemas/V2SessionName'
        tenant:
          $ref: '#/components/schemas/V2TenantName'
        operation:
          $ref: '#/components/schemas/V2SessionOperation'
        template_name:
          $ref: '#/components/schemas/SessionTemplateName'
        limit:
          $ref: '#/components/schemas/SessionLimit'
        stage:
          type: boolean
          description: |
            Set to stage a Session which will not immediately change the state of any Components.
            The "applystaged" endpoint can be called at a later time to trigger the start of this Session.
        components:
          type: string
          description: |
            A comma-separated list of nodes, representing the initial list of nodes
            the Session should operate against.  The list will remain even if
            other Sessions have taken over management of the nodes.
        include_disabled:
          type: boolean
          description: |
            Set to include nodes that have been disabled as indicated in the Hardware State Manager (HSM).
        status:
          $ref: '#/components/schemas/V2SessionStatus'
      additionalProperties: false
    V2SessionUpdate:
      description: |
        A Session update object

        ## Link Relationships

        * self : The Session object
      type: object
      properties:
        components:
          type: string
          description: |
            A comma-separated list of nodes, representing the initial list of nodes
            the Session should operate against.  The list will remain even if
            other Sessions have taken over management of the nodes.
        status:
          $ref: '#/components/schemas/V2SessionStatus'
      additionalProperties: false
    V2SessionArray:
      description: An array of Sessions.
      type: array
      items:
        $ref: '#/components/schemas/V2Session'
    V2SessionExtendedStatusPhases:
      type: object
      description: |
        Detailed information on the phases of a Session.
      properties:
        percent_complete:
          type: number
          description: |
            The percent of Components currently in a completed/stable state
        percent_powering_on:
          type: number
          description: |
            The percent of Components currently in the powering-on phase
        percent_powering_off:
          type: number
          description: |
            The percent of Components currently in the powering-off phase
        percent_configuring:
          type: number
          description: |
            The percent of Components currently in the configuring phase
      additionalProperties: false
    V2SessionExtendedStatusTiming:
      type: object
      description: |
        Detailed information on the timing of a Session.
      properties:
        start_time:
          $ref: '#/components/schemas/V2SessionStartTime'
        end_time:
          $ref: '#/components/schemas/V2SessionEndTime'
        duration:
          type: string
          description: |
            The current duration of the ongoing Session or final duration of the completed Session.
      additionalProperties: false
    V2SessionExtendedStatus:
      type: object
      description: |
        Detailed information on the status of a Session.
      properties:
        status:
          $ref: '#/components/schemas/V2SessionStatusLabel'
        managed_components_count:
          type: integer
          description: |
            The count of Components currently managed by this Session
        phases:
          $ref: '#/components/schemas/V2SessionExtendedStatusPhases'
        percent_successful:
          type: number
          description: |
            The percent of Components currently in a successful state
        percent_failed:
          type: number
          description: |
            The percent of Components currently in a failed state
        percent_staged:
          type: number
          description: |
            The percent of Components currently still staged for this Session
        error_summary:
          type: object
          description: |
            A summary of the errors currently listed by all Components
        timing:
          $ref: '#/components/schemas/V2SessionExtendedStatusTiming'
      additionalProperties: false
    V2BootArtifacts:
      description: |
        A collection of boot artifacts.
      type: object
      properties:
        kernel:
          $ref: '#/components/schemas/BootKernelPath'
        kernel_parameters:
          $ref: '#/components/schemas/BootKernelParameters'
        initrd:
          $ref: '#/components/schemas/BootInitrdPath'
      additionalProperties: false
    V2ComponentBssToken:
      type: string
      description: |
        A token received from the node identifying the boot artifacts.
        For BOS use-only, users should not set this field. It will be overwritten.
      maxLength: 65535
    V2ComponentId:
      type: string
      description: |
        The Component's ID. (e.g. xname for hardware Components)

        It is recommended that this should be 1-127 characters in length.

        This restriction is not enforced in this version of BOS, but it is
        targeted to start being enforced in an upcoming BOS version.
    V2ComponentIdList:
      description: A list of Component IDs (xnames)
      type: array
      items:
        $ref: '#/components/schemas/V2ComponentId'
    V2ComponentLastUpdated:
      type: string
      description: The date/time when the state was last updated in RFC 3339 format.
      example: '2019-07-28T03:26:00Z'
      format: date-time
      readOnly: true
    V2ComponentActualState:
      description: |
        The actual boot artifacts and configuration for a Component
      type: object
      properties:
        boot_artifacts:
          $ref: '#/components/schemas/V2BootArtifacts'
        bss_token:
          $ref: '#/components/schemas/V2ComponentBssToken'
        last_updated:
          $ref: '#/components/schemas/V2ComponentLastUpdated'
      additionalProperties: false
    V2ComponentDesiredState:
      description: |
        The desired boot artifacts and configuration for a Component
      type: object
      properties:
        boot_artifacts:
          $ref: '#/components/schemas/V2BootArtifacts'
        configuration:
          $ref: '#/components/schemas/CfsConfiguration'
        bss_token:
          $ref: '#/components/schemas/V2ComponentBssToken'
        last_updated:
          $ref: '#/components/schemas/V2ComponentLastUpdated'
      additionalProperties: false
    V2ComponentStagedState:
      description: |
        The staged boot artifacts and configuration for a Component. Optionally, a Session
        may be set which can be triggered at a later time against this Component.
      type: object
      properties:
        boot_artifacts:
          $ref: '#/components/schemas/V2BootArtifacts'
        configuration:
          $ref: '#/components/schemas/CfsConfiguration'
        session:
          oneOf:
            - $ref: '#/components/schemas/V2SessionName'
            - $ref: '#/components/schemas/EmptyString'
        last_updated:
          $ref: '#/components/schemas/V2ComponentLastUpdated'
      additionalProperties: false
    V2ComponentLastAction:
      description: |
        Information on the most recent action taken against the node.
      type: object
      properties:
        last_updated:
          $ref: '#/components/schemas/V2ComponentLastUpdated'
        action:
          type: string
          description: A description of the most recent operator/action to impact the Component.
        failed:
          type: boolean
          description: Denotes if the last action failed to accomplish its task
      additionalProperties: false
    V2ComponentEventStats:
      description: |
        Information on the most recent attempt to return the node to its desired state.
      type: object
      properties:
        power_on_attempts:
          type: integer
          description: How many attempts have been made to power-on since the last time the node was in the desired state.
        power_off_graceful_attempts:
          type: integer
          description: How many attempts have been made to power-off gracefully since the last time the node was in the desired state.
        power_off_forceful_attempts:
          type: integer
          description: How many attempts have been made to power-off forcefully since the last time the node was in the desired state.
      additionalProperties: false
    V2ComponentStatus:
      description: Status information for the Component
      type: object
      properties:
        phase:
          type: string
          description: The current phase of the Component in the boot process.
        status:
          type: string
          description: The current status of the Component.  More detailed than phase.
          readOnly: true
        status_override:
          type: string
          description: If set, this will override the status value.
      additionalProperties: false
    V2Component:
      description: |
        The current and desired artifacts state for a Component, and
        the Session responsible for the Component's current state.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/V2ComponentId'
        actual_state:
          $ref: '#/components/schemas/V2ComponentActualState'
        desired_state:
          $ref: '#/components/schemas/V2ComponentDesiredState'
        staged_state:
          $ref: '#/components/schemas/V2ComponentStagedState'
        last_action:
          $ref: '#/components/schemas/V2ComponentLastAction'
        event_stats:
          $ref: '#/components/schemas/V2ComponentEventStats'
        status:
          $ref: '#/components/schemas/V2ComponentStatus'
        enabled:
          type: boolean
          description: A flag indicating if actions should be taken for this Component.
        error:
          type: string
          description: A description of the most recent error to impact the Component.
        session:
          oneOf:
            - $ref: '#/components/schemas/V2SessionName'
            - $ref: '#/components/schemas/EmptyString'
        retry_policy:
          type: integer
          description: |
            The maximum number attempts per action when actions fail.
            Defaults to the global default_retry_policy if not set
          example: 1
          minimum: 0
          maximum: 1048576
      additionalProperties: false
    V2ComponentArray:
      description: An array of Component states.
      type: array
      items:
        $ref: '#/components/schemas/V2Component'
    V2ComponentsFilterByIds:
      description: |
        Information for patching multiple Components by listing their IDs.
      type: object
      properties:
        ids:
          type: string
          description: |
            A comma-separated list of Component IDs.

            It is recommended that this should be 1-65535 characters in length.

            This restriction is not enforced in this version of BOS, but it is
            targeted to start being enforced in an upcoming BOS version.
          minLength: 1
        session:
          $ref: '#/components/schemas/EmptyStringNullable'
      required: [ids]
      additionalProperties: false
    V2ComponentsFilterBySession:
      description: |
        Information for patching multiple Components by Session name.
        All Components part of this Session will be patched.
      type: object
      properties:
        ids:
          $ref: '#/components/schemas/EmptyStringNullable'
        session:
          $ref: '#/components/schemas/V2SessionName'
      required: [session]
      additionalProperties: false
    V2ComponentsUpdate:
      description: Information for patching multiple Components.
      type: object
      properties:
        patch:
          $ref: '#/components/schemas/V2Component'
        filters:
          oneOf:
            - $ref: '#/components/schemas/V2ComponentsFilterByIds'
            - $ref: '#/components/schemas/V2ComponentsFilterBySession'
      required: [patch, filters]
      additionalProperties: false
    V2ApplyStagedComponents:
      description: |
        A list of Components that should have their staged Session applied.
      type: object
      properties:
        xnames:
          $ref: '#/components/schemas/V2ComponentIdList'
      additionalProperties: false
    V2ApplyStagedStatus:
      description: |
        Mapping from Component staged Session statuses to Components with that status.
      type: object
      properties:
        succeeded:
          $ref: '#/components/schemas/V2ComponentIdList'
        failed:
          $ref: '#/components/schemas/V2ComponentIdList'
        ignored:
          $ref: '#/components/schemas/V2ComponentIdList'
      additionalProperties: false
    V2Options:
      description: |
        Options for the Boot Orchestration Service.
      type: object
      properties:
        cleanup_completed_session_ttl:
          type: string
          description: |
            Delete complete Sessions that are older than cleanup_completed_session_ttl (in minutes, hours, days, or weeks).
            0 disables cleanup behavior.
          example: 3d
          format: '^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$'
          minLength: 1
          # This allows for over 10 years using the smallest units (minutes)
          maxLength: 8
        clear_stage:
          type: boolean
          description: Allows a Component's staged information to be cleared when the requested staging action has been started. Defaults to false.
        component_actual_state_ttl:
          type: string
          description: |
            The maximum amount of time a Component's actual state is considered valid (in minutes, hours, days, or weeks).
            0 disables cleanup behavior for newly booted nodes and instructs bos-state-reporter to report once instead of periodically.
          example: 6h
          format: '^(0|0[mMhHdDwW]|[1-9][0-9]*[mMhHdDwW])$'
          minLength: 1
          # This allows for over 10 years using the smallest units (minutes)
          maxLength: 8
        disable_components_on_completion:
          type: boolean
          description: |
            If true, when a Session has brought a Component to its desired state, that Component will be marked as disabled in BOS.
            If false, BOS will continue to maintain the state of the nodes declaratively, even after a Session finishes.
        discovery_frequency:
          type: integer
          description: How frequently the BOS discovery agent syncs new Components from HSM. (in seconds)
          minimum: 0
          # A little over a year
          maximum: 33554432
        logging_level:
          type: string
          description: The logging level for all BOS services
        max_boot_wait_time:
          type: integer
          description: How long BOS will wait for a node to boot into a usable state before rebooting it again (in seconds)
          minimum: 0
          # Over 12 days
          maximum: 1048576
        max_power_on_wait_time:
          type: integer
          description: How long BOS will wait for a node to power on before calling power on again (in seconds)
          minimum: 0
          # Over 12 days
          maximum: 1048576
        max_power_off_wait_time:
          type: integer
          description: How long BOS will wait for a node to power off before forcefully powering off (in seconds)
          minimum: 0
          # Over 12 days
          maximum: 1048576
        polling_frequency:
          type: integer
          description: How frequently the BOS operators check Component state for needed actions. (in seconds)
          minimum: 0
          # Over 12 days
          maximum: 1048576
        default_retry_policy:
          type: integer
          description: The default maximum number attempts per node for failed actions.
          example: 1
          minimum: 0
          maximum: 1048576
      additionalProperties: true

  requestBodies:
    V2sessionCreateRequest:
      description: The information to create a Session
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionCreate'
    V2componentUpdateRequest:
      description: The state for a single Component
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Component'
    V2componentsPutRequest:
      description: The state for an array of Components
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentArray'
    V2componentsUpdateRequest:
      description: The state for an array of Components
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/V2ComponentsUpdate'
              - $ref: '#/components/schemas/V2ComponentArray'
    V2optionsUpdateRequest:
      description: Service-wide options
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    V2sessionUpdateRequest:
      description: The state for a single Session
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionUpdate'
    V2applyStagedRequest:
      description: A list of xnames that should have their staged Session applied.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ApplyStagedComponents'

  responses:
    ResourceDeleted:
      description: The resource was deleted.
    ServiceHealth:
      description: Service Health information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Healthz'
    SessionTemplateName:
      description: Session Template name
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionTemplateName'
    Version:
      description: |
        Get version details
        The versioning system uses [semver](https://semver.org/).
        ## Link Relationships
        * self : Link to itself
        * versions : Link back to the versions resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Version'
    # V1
    V1Session:
      description: Session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1Session'
    V1SessionDetails:
      description: Session details
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/V1SessionDetails'
              - $ref: '#/components/schemas/V1SessionDetailsByTemplateUuid'
    V1SessionStatus:
      description: A list of Boot Set Statuses and metadata
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V1SessionStatus'
    # V2
    V2SessionTemplateDetails:
      description: Session Template details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionTemplate'
    V2SessionTemplateDetailsArray:
      description: Session Template details array
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionTemplateArray'
    V2SessionTemplateValidation:
      description: Session Template validity details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionTemplateValidation'
    V2SessionDetails:
      description: Session details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Session'
    V2SessionDetailsArray:
      description: Session details array
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionArray'
    V2SessionExtendedStatus:
      description: Session status details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2SessionExtendedStatus'
    V2componentDetails:
      description: A single Component state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Component'
    V2componentDetailsArray:
      description: A collection of Component states
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ComponentArray'
    V2applyStagedResponse:
      description: A list of xnames that should have their staged Session applied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ApplyStagedStatus'
    V2options:
      description: A collection of service-wide options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2Options'
    # Errors
    AlreadyExists:
      description: The resource to be created already exists
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    BadRequestOrMultiTenancyNotSupported:
      description: |
        Multi-tenancy is not supported for this BOS v1 request.
        If no tenant was specified, then the request was bad for another reason.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    MultiTenancyNotSupported:
      description: Multi-tenancy is not supported for this BOS v1 request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ResourceNotFound:
      description: The resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UpdateConflict:
      description: The update was not allowed due to a conflict.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalError:
      description: An Internal Server Error occurred handling the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  parameters:
    BootSetNamePathParam:
      name: boot_set_name
      in: path
      description: Boot Set name
      required: true
      schema:
        type: string
    TemplateIdPathParam:
      name: session_template_id
      in: path
      description: Session Template name
      required: true
      schema:
        $ref: '#/components/schemas/SessionTemplateName'
    V1CategoryNamePathParam:
      name: category_name
      in: path
      description: The category name
      required: true
      schema:
        type: string
    V1PhaseNamePathParam:
      name: phase_name
      in: path
      description: The phase name
      required: true
      schema:
        type: string
    V1SessionIdPathParam:
      name: session_id
      in: path
      description: Session ID
      required: true
      schema:
        type: string
    V1TenantHeaderParam:
      name: Cray-Tenant-Name
      in: header
      description: |
        Tenant name. Multi-tenancy is not supported for most BOS v1 endpoints.
        If this parameter is set to a non-empty string, the request will be rejected.
      required: false
      schema:
        $ref: '#/components/schemas/TenantName'
    V2ComponentIdPathParam:
      name: component_id
      in: path
      description: Component ID. e.g. xname for hardware Components
      required: true
      schema:
        $ref: '#/components/schemas/V2ComponentId'
    V2SessionIdPathParam:
      name: session_id
      in: path
      description: Session ID
      required: true
      schema:
        type: string
    V2SessionsMaxAgeQueryParam:
      name: max_age
      schema:
        $ref: '#/components/schemas/AgeString'
      in: query
      description: |-
        Only include Sessions younger than the given age.  Age is given in the format "1d" or "6h"
    V2SessionsMinAgeQueryParam:
      name: min_age
      schema:
        $ref: '#/components/schemas/AgeString'
      in: query
      description: |-
        Only include Sessions older than the given age.  Age is given in the format "1d" or "6h"
    V2SessionsStatusQueryParam:
      name: status
      schema:
        $ref: '#/components/schemas/V2SessionStatusLabel'
      in: query
      description: |-
        Only include Sessions with the given status.
    V2TenantHeaderParam:
      name: Cray-Tenant-Name
      in: header
      description: |
        Tenant name.

        Requests with a non-empty tenant name will restict the context of the operation to Session Templates owned by that tenant.

        Requests with an empty tenant name, or that omit this parameter, will have no such context restrictions.
      required: false
      schema:
        $ref: '#/components/schemas/TenantName'

paths:
  /:
    get:
      summary: Get API versions
      description: Return list of versions currently running.
      tags:
        - version
      x-openapi-router-controller: bos.server.controllers.base
      responses:
        200:
          description: A collection of Versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Version'
# See Version guidance is in
# https://connect.us.cray.com/confluence/display/SMA/Shasta+RESTful+Service+Design#ShastaRESTfulServiceDesign-Versioning
#
# Need standard fmt operationId  getVersion, postSession, etc.
  /v1:
    get:
      summary: Get API version
      description: Return the API version
      tags:
        - version
      x-openapi-router-controller: bos.server.controllers.v1.base
      operationId: v1_get
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'
  /v1/healthz:
    get:
      summary: Get service health details
      description: Get BOS health details.
      tags:
        - healthz
      x-openapi-router-controller: bos.server.controllers.v1.healthz
      operationId: v1_get_healthz
      responses:
        200:
          $ref: '#/components/responses/ServiceHealth'
        500:
          $ref: '#/components/responses/BadRequest'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/sessiontemplate:
    parameters:
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    post:
      summary: Create Session Template
      description: |
        Create a new Session Template.
        
        The created template will be modified if necessary to follow the BOS v2 session template format.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: create_v1_sessiontemplate
      requestBody:
         description: A JSON object for creating a Session Template
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V1SessionTemplate'
      responses:
        201:
          $ref: '#/components/responses/SessionTemplateName'
        400:
          $ref: '#/components/responses/BadRequestOrMultiTenancyNotSupported'
    get:
      summary: List Session Templates
      description: |
        List all Session Templates.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplates
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetailsArray'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
  /v1/sessiontemplate/{session_template_id}:
    parameters:
      - $ref: '#/components/parameters/TemplateIdPathParam'
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    get:
      summary: Get Session Template by ID
      description: |
        Get Session Template by Session Template ID.
        The Session Template ID corresponds to the *name*
        of the Session Template.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete a Session Template
      description: Delete a Session Template.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: delete_v1_sessiontemplate
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/sessiontemplatetemplate:
    get:
      summary: Get an example Session Template.
      description: |
        Returns a skeleton of a Session Template, which can be
        used as a starting point for users creating their own
        Session Templates.
      tags:
        - sessiontemplate
      x-openapi-router-controller: bos.server.controllers.v1.sessiontemplate
      operationId: get_v1_sessiontemplatetemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
  /v1/session:
    parameters:
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    post:
      summary: Create a Session
      description: |
        The creation of a Session performs the operation
        specified in the SessionCreateRequest
        on the Boot Sets defined in the Session Template.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: create_v1_session
      requestBody:
         description: A JSON object for creating a Session
         required: true
         content:
           application/json:
             schema:
               oneOf:
                 - $ref: '#/components/schemas/V1SessionByTemplateName'
                 - $ref: '#/components/schemas/V1SessionByTemplateUuid'
      responses:
        201:
          $ref: '#/components/responses/V1Session'
        400:
          $ref: '#/components/responses/BadRequestOrMultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    get:
      summary: List Session IDs
      description: |
        List IDs of all Sessions, including those in progress and those complete.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: get_v1_sessions
      responses:
        200:
          description: A collection of Session IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V1SessionId'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
  /v1/session/{session_id}:
    parameters:
      - $ref: '#/components/parameters/V1SessionIdPathParam'
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    get:
      summary: Get Session details by ID
      description: Get Session details by Session ID.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: get_v1_session
      responses:
        200:
          $ref: '#/components/responses/V1SessionDetails'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete Session by ID
      description: Delete Session by Session ID.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.session
      operationId: delete_v1_session
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/session/{session_id}/status:
    parameters:
      - $ref: '#/components/parameters/V1SessionIdPathParam'
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    get:
      summary: A list of the statuses for the different Boot Sets.
      description: |
        A list of the statuses for the different Boot Sets.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status
      responses:
        200:
          $ref: '#/components/responses/V1SessionStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    post:
      summary: Create the initial Session status
      description: |
        Creates the initial Session status.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: create_v1_session_status
      requestBody:
         description: A JSON object for creating the status for a Session
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V1SessionStatus'
      responses:
        200:
          $ref: '#/components/responses/V1SessionStatus'
        400:
          $ref: '#/components/responses/BadRequestOrMultiTenancyNotSupported'
        409:
          $ref: '#/components/responses/AlreadyExists'
    patch:
      summary: Update the Session status
      description: |
        Update the Session status. You can update the start or stop times.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: update_v1_session_status
      requestBody:
        description: A JSON object for updating the status for a Session
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1GenericMetadata'
      responses:
        200:
          $ref: '#/components/responses/V1SessionStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete the Session status
      description: |
        Deletes an existing Session status
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: delete_v1_session_status
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequestOrMultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/session/{session_id}/status/{boot_set_name}:
    parameters:
      - $ref: '#/components/parameters/V1SessionIdPathParam'
      - $ref: '#/components/parameters/BootSetNamePathParam'
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    get:
      summary: Get the status for a Boot Set.
      description: Get the status for a Boot Set.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status_by_bootset
      responses:
        200:
          description: Metadata and a list of the Phase Statuses for the Boot Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BootSetStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    post:
      summary: Create a Boot Set Status
      description: |
        Create a status for a Boot Set
      tags:
        - session
        - status
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: create_v1_boot_set_status
      requestBody:
        description: A JSON object for creating a status for a Boot Set
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1BootSetStatus'
      responses:
        201:
          description: The created Boot Set status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BootSetStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        409:
          $ref: '#/components/responses/AlreadyExists'
    patch:
      summary: Update the status.
      description: |
        This will change the status for one or more nodes within
        the Boot Set.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: update_v1_session_status_by_bootset
      requestBody:
         description: A JSON object for updating the status for a Session
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V1UpdateRequestList'
      responses:
        200:
          description: A list of Boot Set Statuses and metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1BootSetStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete the Boot Set status
      description: |
        Deletes an existing Boot Set status
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: delete_v1_boot_set_status
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequestOrMultiTenancyNotSupported'
  /v1/session/{session_id}/status/{boot_set_name}/{phase_name}:
    parameters:
      - $ref: '#/components/parameters/V1SessionIdPathParam'
      - $ref: '#/components/parameters/BootSetNamePathParam'
      - $ref: '#/components/parameters/V1PhaseNamePathParam'
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    get:
      summary: Get the status for a specific Boot Set and phase.
      description: Get the status for a specific Boot Set and phase.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status_by_bootset_and_phase
      responses:
        200:
          description: A list of the nodes in the Phase and Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PhaseStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/session/{session_id}/status/{boot_set_name}/{phase_name}/{category_name}:
    parameters:
      - $ref: '#/components/parameters/V1SessionIdPathParam'
      - $ref: '#/components/parameters/BootSetNamePathParam'
      - $ref: '#/components/parameters/V1PhaseNamePathParam'
      - $ref: '#/components/parameters/V1CategoryNamePathParam'
      - $ref: '#/components/parameters/V1TenantHeaderParam'
    get:
      summary: Get the status for a specific Boot Set, phase, and category.
      description: Get the status for a specific Boot Set, phase, and category.
      tags:
        - session
      x-openapi-router-controller: bos.server.controllers.v1.status
      operationId: get_v1_session_status_by_bootset_and_phase_and_category
      responses:
        200:
          description: A list of the nodes in the Phase and Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PhaseCategoryStatus'
        400:
          $ref: '#/components/responses/MultiTenancyNotSupported'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v1/version:
    get:
      summary: Get API version
      description: Return the API version
      tags:
        - version
      x-openapi-router-controller: bos.server.controllers.v1.base
      operationId: v1_get_version
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'

  /v2:
    get:
      summary: Get API version
      description: Return the API version
      tags:
        - v2
        - version
      x-openapi-router-controller: bos.server.controllers.v2.base
      operationId: get_v2
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'
  /v2/healthz:
    get:
      summary: Get service health details
      description: Get BOS health details.
      tags:
        - v2
        - healthz
      x-openapi-router-controller: bos.server.controllers.v2.healthz
      operationId: get_v2_healthz
      responses:
        200:
         $ref: '#/components/responses/ServiceHealth'
        500:
          $ref: '#/components/responses/BadRequest'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v2/sessiontemplates:
    parameters:
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: List Session Templates
      description: List all Session Templates.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: get_v2_sessiontemplates
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetailsArray'
  /v2/sessiontemplatesvalid/{session_template_id}:
    parameters:
      - $ref: '#/components/parameters/TemplateIdPathParam'
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: Validate the Session Template by ID
      description: |
        Validate Session Template by Session Template ID.
        The Session Template ID corresponds to the *name*
        of the Session Template.
      tags:
        - v2
        - sessiontemplatess
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: validate_v2_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateValidation'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/sessiontemplates/{session_template_id}:
    parameters:
      - $ref: '#/components/parameters/TemplateIdPathParam'
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: Get Session Template by ID
      description: |
        Get Session Template by Session Template ID.
        The Session Template ID corresponds to the *name*
        of the Session Template.
      tags:
        - v2
        - sessiontemplatess
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: get_v2_sessiontemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Create Session Template
      description: Create a new Session Template.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: put_v2_sessiontemplate
      requestBody:
         description: A JSON object for creating a Session Template
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/V2SessionTemplate'
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a Session Template
      description: Update an existing Session Template.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: patch_v2_sessiontemplate
      requestBody:
        description: A JSON object for updating a Session Template
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2SessionTemplate'
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete a Session Template
      description: Delete a Session Template.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: delete_v2_sessiontemplate
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/sessiontemplatetemplate:
    get:
      summary: Get an example Session Template.
      description: |
        Returns a skeleton of a Session Template, which can be
        used as a starting point for users creating their own
        Session Templates.
      tags:
        - v2
        - sessiontemplates
      x-openapi-router-controller: bos.server.controllers.v2.sessiontemplates
      operationId: get_v2_sessiontemplatetemplate
      responses:
        200:
          $ref: '#/components/responses/V2SessionTemplateDetails'
  /v2/sessions:
    parameters:
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    post:
      summary: Create a Session
      description: |
        The creation of a Session performs the operation
        specified in the SessionCreateRequest
        on the Boot Sets defined in the Session Template.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: post_v2_session
      requestBody:
         $ref: '#/components/requestBodies/V2sessionCreateRequest'
      responses:
        201:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List Sessions
      parameters:
        - $ref: '#/components/parameters/V2SessionsMinAgeQueryParam'
        - $ref: '#/components/parameters/V2SessionsMaxAgeQueryParam'
        - $ref: '#/components/parameters/V2SessionsStatusQueryParam'
      description: |
        List all Sessions, including those in progress and those complete.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: get_v2_sessions
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetailsArray'
    delete:
      summary: Delete multiple Sessions.
      parameters:
        - $ref: '#/components/parameters/V2SessionsMinAgeQueryParam'
        - $ref: '#/components/parameters/V2SessionsMaxAgeQueryParam'
        - $ref: '#/components/parameters/V2SessionsStatusQueryParam'
      description: |
        Delete multiple Sessions.  If filters are provided, only Sessions matching
        all filters will be deleted.  By default only completed Sessions will be deleted.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: delete_v2_sessions
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/sessions/{session_id}:
    parameters:
      - $ref: '#/components/parameters/V2SessionIdPathParam'
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: Get Session details by ID
      description: Get Session details by Session ID.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: get_v2_session
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    patch:
      summary: Update status of a single Session
      description: |
        Update the state for a given Session in the BOS database.
        This is intended only for internal use by the BOS service.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: patch_v2_session
      requestBody:
        $ref: '#/components/requestBodies/V2sessionUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    delete:
      summary: Delete Session by ID
      description: Delete Session by Session ID.
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: delete_v2_session
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/sessions/{session_id}/status:
    parameters:
      - $ref: '#/components/parameters/V2SessionIdPathParam'
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: Get Session extended status information by ID
      description: Get Session extended status information by ID
      tags:
        - v2
        - sessions
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      operationId: get_v2_session_status
      responses:
        200:
          $ref: '#/components/responses/V2SessionExtendedStatus'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    post:
      summary: Saves the current Session to database
      tags:
        - v2
        - sessions
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.sessions
      description: Saves the current Session to database.  For use at Session completion.
      operationId: save_v2_session_status
      responses:
        200:
          $ref: '#/components/responses/V2SessionDetails'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/components:
    parameters:
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: Retrieve the state of a collection of Components
      parameters:
        - name: ids
          schema:
            $ref: '#/components/schemas/V2ComponentId'
          in: query
          description: |-
            Retrieve the Components with the given ID
            (e.g. xname for hardware Components). Can be chained
            for selecting groups of Components.
        - name: session
          schema:
            type: string
          in: query
          description: |-
            Retrieve the Components with the given Session ID.
        - name: staged_session
          schema:
            type: string
          in: query
          description: |-
            Retrieve the Components with the given staged Session ID.
        - name: enabled
          schema:
            type: boolean
          in: query
          description: |-
            Retrieve the Components with the "enabled" state.
        - name: phase
          schema:
            type: string
          in: query
          description: |-
            Retrieve the Components in the given phase.
        - name: status
          schema:
            type: string
          in: query
          description: |-
            Retrieve the Components with the given status.
      description: |-
        Retrieve the full collection of Components in the form of a
        ComponentArray. Full results can also be filtered by query
        parameters. Only the first filter parameter of each type is
        used and the parameters are applied in an AND fashion.
        If the collection is empty or the filters have no match, an
        empty array is returned.
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: get_v2_components
      responses:
        200:
          $ref: '#/components/responses/V2componentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Add or Replace a collection of Components
      description: Update the state for a collection of Components in the BOS database
      tags:
        - v2
        - components
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: put_v2_components
      requestBody:
        $ref: '#/components/requestBodies/V2componentsPutRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a collection of Components
      description: Update the state for a collection of Components in the BOS database
      tags:
        - v2
        - components
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: patch_v2_components
      requestBody:
        $ref: '#/components/requestBodies/V2componentsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetailsArray'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/components/{component_id}:
    parameters:
      - $ref: '#/components/parameters/V2ComponentIdPathParam'
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    get:
      summary: Retrieve the state of a single Component
      description: Retrieve the current and desired state of a single Component
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: get_v2_component
      responses:
        200:
          $ref: '#/components/responses/V2componentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
    put:
      summary: Add or Replace a single Component
      description: Update the state for a given Component in the BOS database
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: put_v2_component
      requestBody:
        $ref: '#/components/requestBodies/V2componentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update a single Component
      description: Update the state for a given Component in the BOS database
      tags:
        - v2
        - components
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: patch_v2_component
      requestBody:
        $ref: '#/components/requestBodies/V2componentUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2componentDetails'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        409:
          $ref: '#/components/responses/UpdateConflict'
    delete:
      summary: Delete a single Component
      description: Delete the given Component
      tags:
        - v2
        - components
        - cli_ignore
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: delete_v2_component
      responses:
        204:
          $ref: '#/components/responses/ResourceDeleted'
        404:
          $ref: '#/components/responses/ResourceNotFound'
  /v2/applystaged:
    parameters:
      - $ref: '#/components/parameters/V2TenantHeaderParam'
    post:
      summary: Start a staged Session for the specified Components
      description: |
        Given a list of xnames, this will trigger the start of any Sessions
        staged for those Components.  Components without a staged Session
        will be ignored, and a list all Components that are acted on will
        be returned in the response.
      tags:
        - v2
        - applystaged
      x-openapi-router-controller: bos.server.controllers.v2.components
      operationId: post_v2_apply_staged
      requestBody:
         $ref: '#/components/requestBodies/V2applyStagedRequest'
      responses:
        200:
          $ref: '#/components/responses/V2applyStagedResponse'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/options:
    get:
      summary: Retrieve the BOS service options
      description: Retrieve the list of BOS service options.
      tags:
        - options
      x-openapi-router-controller: bos.server.controllers.v2.options
      operationId: get_v2_options
      responses:
        200:
          $ref: '#/components/responses/V2options'
    patch:
      summary: Update BOS service options
      description: Update one or more of the BOS service options.
      tags:
        - v2
        - options
      x-openapi-router-controller: bos.server.controllers.v2.options
      operationId: patch_v2_options
      requestBody:
        $ref: '#/components/requestBodies/V2optionsUpdateRequest'
      responses:
        200:
          $ref: '#/components/responses/V2options'
        400:
          $ref: '#/components/responses/BadRequest'
  /v2/version:
    get:
      summary: Get API version
      description: Return the API version
      tags:
        - v2
        - version
      x-openapi-router-controller: bos.server.controllers.v2.base
      operationId: get_version_v2
      responses:
        200:
          $ref: '#/components/responses/Version'
        500:
          $ref: '#/components/responses/BadRequest'