/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-bos"
        TEST_NAME = "cray-bos"
        REPORTER_NAME = "bos-reporter"
        DESCRIPTION = "Cray Management System Boot Orchestration Service (BOS)"
        RPTR_SPEC_FILE = "bos-reporter.spec"
        TEST_SPEC_FILE = "bos-crayctldeploy-test.spec"
        IS_STABLE = getBuildIsStable()
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
        PUBLISH_SP2 = "sle-15sp2"
        PUBLISH_SP3 = "sle-15sp3"        
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Add RPM Metadata") {
            parallel {
                stage('bos-reporter') {
                    steps {
                        echo "RPM build metadata is ${env.BUILD_METADATA}"
                        runLibraryScript("addRpmMetaData.sh", env.RPTR_SPEC_FILE)
                    }
                }

                stage('bos tests') {
                    steps {
                        runLibraryScript("addRpmMetaData.sh", env.TEST_SPEC_FILE)
                    }
                }
            }
        }

        stage("Build Image and Chart") {
            parallel {
                stage('Image') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                    }

                    steps {
                        echo "Docker args are ${env.DOCKER_ARGS}"
                        sh "make image"
                    }
                }

                stage('Chart') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }

                    steps {
                        updateCsmHelmChartAppVersion(chartPath: "${WORKSPACE}/kubernetes/${NAME}", appVersion: env.DOCKER_VERSION)
                        sh "make chart"
                    }
                }
			}
		}

        stage('Publish ') {
            parallel {
                // I combine these two steps because if the image publish fails, we do not want to publish the chart
                // referencing that image
                // But we do publish the RPMs even if this fails. That was a practical matter of not being able to
                // build the SP2 and SP3 rpms first (because the SP3 overwrites the SP2) and then publish them, so
                // I just published them immediately after they are built.
                stage('Image and Chart') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }
                    steps {
                        publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                        publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                    }
                }                
            }
        }

        stage("RPM Build Prepare") {
        	steps {
        		sh "make rpm_prepare"
        	}
        }
		
        stage("SP2 RPM Build") {
	            agent {
	                docker {
	                    image "arti.hpc.amslabs.hpecorp.net/dstbuildenv-docker-master-local/cray-sle15sp2_build_environment:latest"
	                    reuseNode true
	                    // Support docker in docker for clamav scan
	                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
	                }
	            }
	            steps {
	                sh "make rptr_rpm_prepare"
	                sh "make rptr_rpm"
	            }
		}

        stage("SP2 RPM Publish") {
	            steps {
	                script {
	                    publishCsmRpms(component: env.REPORTER_NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", os: env.PUBLISH_SP2, arch: "x86_64", isStable: env.IS_STABLE)
	                    publishCsmRpms(component: env.REPORTER_NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP2, arch: "src", isStable: env.IS_STABLE)
	                }
	                sh "make rpm_build_clean"
	                sh "make rpm_build_source_clean"
	                
	            }
        }

        stage("SP3 RPM Build") {
	            agent {
	                docker {
	                    image "arti.hpc.amslabs.hpecorp.net/dstbuildenv-docker-master-local/cray-sle15sp3_build_environment:latest"
	                    reuseNode true
	                    // Support docker in docker for clamav scan
	                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
	                }
	            }
	            steps {
	                sh "make rptr_rpm_prepare"
	                sh "make rptr_rpm"
	            }
		}

        stage("SP3 RPM Publish") {
	            steps {
	                script {
	                    publishCsmRpms(component: env.REPORTER_NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", os: env.PUBLISH_SP3, arch: "x86_64", isStable: env.IS_STABLE)
	                    publishCsmRpms(component: env.REPORTER_NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP3, arch: "src", isStable: env.IS_STABLE)
	                }
	                sh "make rpm_build_clean"
	                sh "make rpm_build_source_clean"
	            }
	     }
		     
		stage("Test RPM Build") {
	        steps {
	        	sh "make test_rpm_prepare"
	            sh "make test_rpm"
            }
        }

        stage("Test RPM Publish") {
	            steps {
	                script {
	                    publishCsmRpms(component: env.TEST_NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "x86_64", isStable: env.IS_STABLE)
	                    publishCsmRpms(component: env.TEST_NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
	                }
	                sh "make rpm_build_clean"
	                sh "make rpm_build_source_clean"
	            }
	     }
    }
}